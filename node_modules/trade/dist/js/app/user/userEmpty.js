(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["marionette", "user/userModel"], (function(Marionette, UserModel) {
    var UserEmpty;
    return UserEmpty = (function(_super) {
      __extends(UserEmpty, _super);

      function UserEmpty() {
        return UserEmpty.__super__.constructor.apply(this, arguments);
      }

      UserEmpty.prototype.template = "#user-empty-view";

      UserEmpty.prototype.model = UserModel;

      UserEmpty.prototype.ui = {
        registerNick: "input[name=register-nick]",
        registerPassword: "input[name=register-pwd]",
        registerMail: "input[name=register-mail]",
        loginMail: "input[name=login-mail]",
        loginPassword: "input[name=login-pwd]"
      };

      UserEmpty.prototype.events = {
        'click button#register': "doRegister",
        'click button#login': "doLogin"
      };

      UserEmpty.prototype.doRegister = function(e) {
        e.preventDefault();
        this.model.set({
          username: this.ui.registerNick.val()
        });
        this.model.set({
          email: this.ui.registerMail.val()
        });
        this.model.set({
          password: this.ui.registerPassword.val()
        });
        this.model.set("status", "register");
        if (this.model.save() === false) {
          return console.log(this.model.validationError);
        }
      };

      UserEmpty.prototype.doLogin = function(e) {
        e.preventDefault();
        this.model.set({
          username: "dd"
        });
        this.model.set({
          email: this.ui.loginMail.val()
        });
        this.model.set({
          password: this.ui.loginPassword.val()
        });
        this.model.set("status", "login");
        if (this.model.save() === false) {
          return console.log(this.model.validationError);
        }
      };

      return UserEmpty;

    })(Marionette.ItemView);
  }));

}).call(this);
