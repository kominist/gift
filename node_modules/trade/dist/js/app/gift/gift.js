(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["marionette", "gift/giftModel", "user/userModel"], (function(Marionette, GiftModel, UserModel) {
    var Gift;
    return Gift = (function(_super) {
      __extends(Gift, _super);

      function Gift() {
        return Gift.__super__.constructor.apply(this, arguments);
      }

      Gift.prototype.model = GiftModel;

      Gift.prototype.template = "#gift-view";

      Gift.prototype.currentUser = UserModel;

      Gift.prototype.ui = {
        create: "button#add-gift"
      };

      Gift.prototype.events = {
        'click button[name=accept-gift]': "doAccept",
        'click button[name=refuse-gift]': "doRefuse",
        'click button[name=cancel-gift]': "doCancel"
      };

      Gift.prototype.getTemplate = function() {
        if (this.model.get("cancelable") === true) {
          return "#gift-view-current-giver";
        }
        if (this.model.get("refusable") === true) {
          return "#gift-view-current-getter";
        }
        return "#gift-view";
      };

      Gift.prototype.doAccept = function(e) {
        e.preventDefault();
        this.model.set("status", "accepted");
        if (this.model.save() === false) {
          return console.log(this.model.validationError);
        } else {
          return setTimeout(function() {
            return window.location.reload();
          }, 500);
        }
      };

      Gift.prototype.doRefuse = function(e) {
        e.preventDefault();
        this.model.set("status", "refused");
        if (this.model.save() === false) {
          return console.log(this.model.validationError);
        } else {
          return setTimeout(function() {
            return window.location.reload();
          }, 500);
        }
      };

      Gift.prototype.doCancel = function(e) {
        e.preventDefault();
        return this.model.destroy();
      };

      return Gift;

    })(Marionette.ItemView);
  }));

}).call(this);
