(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["marionette", "search/searchModel", "search/searchUserModel"], (function(Marionette, SearchModel, SearchUserModel) {
    var Search;
    return Search = (function(_super) {
      __extends(Search, _super);

      function Search() {
        return Search.__super__.constructor.apply(this, arguments);
      }

      Search.prototype.model = SearchModel;

      Search.prototype.template = "#gift-search";

      Search.prototype.ui = {
        input: "input[name=gift-search]",
        suggestion: "#result",
        send: "button[name=gift-add]"
      };

      Search.prototype.events = {
        "keyup input[name=gift-search]": "doSearch",
        "click button[name=gift-add]": "sendUsername"
      };

      Search.prototype.doSearch = function(e) {
        if (this.ui.input.val().length >= 1) {
          this.model.set("value", this.ui.input.val());
          return this.model.save({}, {
            success: (function(_this) {
              return function(model, response) {
                return _this.suggest(response);
              };
            })(this)
          });
        }
      };

      Search.prototype.suggest = function(results) {
        var tpl;
        tpl = $("#search-result").html();
        if (results.length === 0 || results === false) {
          results.username = "";
        }
        return $("#result").html(_.template(tpl, {
          results: results
        }));
      };

      Search.prototype.sendUsername = function(e) {
        var searchUserModel;
        e.preventDefault();
        searchUserModel = new SearchUserModel({
          username: this.ui.input.val()
        });
        if (searchUserModel.save() === false) {
          return console.log(this.model.validationError);
        } else {
          return setTimeout(function() {
            return window.location.reload();
          }, 500);
        }
      };

      return Search;

    })(Marionette.ItemView);
  }));

}).call(this);
